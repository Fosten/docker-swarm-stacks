version: '3.9'

services:
  tailscale:
    image: tailscale/tailscale:stable
    hostname: '{{.Node.Hostname}}'
    networks:
      - traefik-tailscale
    cap_add:
      - NET_ADMIN
      - NET_RAW
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv6.conf.all.forwarding=1
    environment:
      - TS_AUTHKEY=${TS_AUTHKEY}
      - TS_EXTRA_ARGS=${TS_EXTRA_ARGS1} ${TS_EXTRA_ARGS2} ${TS_EXTRA_ARGS3}
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
    volumes:
      - ${HOME}/tailscale/state:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.type == happyapp
      labels:
        - traefik.enable=false

  tsdproxy:
    image: almeidapaulopt/tsdproxy:2
    networks:
      - traefik-public
      - traefik-tailscale
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${HOME}/tsdproxy/data:/data
      - ${HOME}/tsdproxy/config:/config
    environment:
      - TSDPROXY_AUTHKEY=${TSDPROXY_AUTHKEY}
      - TSDPROXY_HOSTNAME=${TSDPROXY_HOSTNAME}
      - DOCKER_HOST=unix:///var/run/docker.sock
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.type == happyapp
      labels:
        - traefik.enable=true
        - traefik.http.routers.tsdproxy.rule=Host(`${TSDPROXY_FQDN}`)
        - traefik.http.routers.tsdproxy.entrypoints=https
        - traefik.http.routers.tsdproxy.service=tsdproxy
        - traefik.http.routers.tsdproxy.tls.certresolver=mydnschallenge
        - traefik.http.services.tsdproxy.loadbalancer.server.port=8080
        - traefik.http.routers.tsdproxy.middlewares=keycloakopenid-trusted-client

networks:
  traefik-public:
    external: true
  traefik-tailscale:
    external: true
